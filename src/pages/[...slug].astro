---
import { getCollection } from 'astro:content';
import BaseLayout from '../components/BaseLayout.astro';

export async function getStaticPaths() {
    const posts = await getCollection('blog');
    return posts.map(post => {
        const publishDate = post.data.publishDate;
        const year = publishDate.getFullYear();
        const month = String(publishDate.getMonth() + 1).padStart(2, '0');
        const baseSlug = post.slug.replace(/^\d{4}-\d{2}-/, '');
        
        return {
            params: { 
                slug: `${year}/${month}/${baseSlug}`
            },
            props: { post },
        };
    });
}

const { post } = Astro.props;
const { Content } = await post.render();

const title = `${post.data.title} | Suganthan`;
---
<BaseLayout title={title} description={post.data.description} headerVariant="small">
    <div class="blog-timeline">
        <article class="timeline-entry">
                <div class="post-header">
                    <h2 class="timeline-co type-primary">
                        {post.data.title}
                    </h2>
                    {post.data.description && <div class="post-description">{post.data.description}</div>}
                    <span class="timeline-time type-secondary">{post.data.publishDate.toLocaleDateString('en-US', { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' })}</span>
                </div>
            <div class="timeline-description">
                <Content />
            </div>
        </article>
    </div>
</BaseLayout>

<style is:global>
/* Override main grid to exclude intro area */
main {
    grid-template-areas:
        ". header ."
        ". blog ."
        ". footer .";
    grid-template-rows: 1fr auto auto;
    grid-template-columns: 1fr minmax(auto, 800px) 1fr;
}

.logo {
    margin: var(--v-space) 0;
}

/* Override timeline entry grid for blog posts */
.timeline-entry {
    grid-template-areas:
        ". co ."
        ". description .";
    grid-template-rows: auto 1fr;
    grid-template-columns: 1fr 10fr 1fr;
    padding: calc(var(--v-space)/2) 0;
    backdrop-filter: none;
}

.post-header {
    grid-area: co;
    margin: calc(var(--v-space) * .25) 0 0;
}

.timeline-co {
    margin: 0 0 calc(var(--v-space) * .25) 0;
}

.post-description {
    font-size: 1.2rem;
    margin: calc(var(--v-space) * .25) 0;
    color: var(--c-secondary);
    font-style: italic;
}

.timeline-time {
    display: block;
    margin-top: calc(var(--v-space) * .25);
}

@media only screen and (max-width: 834px) {
    main {
        grid-template-columns: 1fr 20fr 1fr;
    }
    .timeline-entry {
        grid-template-columns: 1fr 20fr 1fr;
    }
}

/* Enhance markdown content styling */
.timeline-description h2 {
    font-size: 2rem;
    margin: 2rem 0 1rem;
    font-weight: var(--f-weight);
}

.timeline-description ul,
.timeline-description ol {
    margin: 1rem 0;
    padding-left: 1.5rem;
}

.timeline-description li {
    margin: 0.5rem 0;
}

.timeline-description p {
    margin: 1rem 0;
}

.timeline-description strong {
    color: var(--c-primary);
}
</style>
